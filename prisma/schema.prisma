// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// dbml generator
generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId()
  phone    String @unique
  email    String @unique
  password String 
  role     Role    @default(CASHIER)
  employee     Employee?
  transactions Transaction[]

  @@map("user")
}

model Employee {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId()
  user_id    String   @unique @db.ObjectId()
  user_info  User     @relation(fields: [user_id], references: [id])
  address    String
  birth_date DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("employee")
}

enum Role {
  ADMIN
  CASHIER
}

model CategoryProduct {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId()
  name               String    // Category Product Name: makanan & minuman
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  Products           Product[]

  @@map("category_product")
}

model Product {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId()
  name               String          // teh 
  price              Float           // harga 5000
  images             String?
  cat_product_id     String?          @db.ObjectId() // category product id si makanan/minuman
  cat_product_detail CategoryProduct? @relation(fields: [cat_product_id],references: [id] )
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  TransactionDetails TransactionDetails[] // this product is existing on this certain transaction

  @@map("product")
}


model Transaction {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId()
  cashier_id         String   @db.ObjectId()
  cashier_info       User     @relation(fields: [cashier_id], references: [id])
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  name_customer      String
  payment_method_name String
  total_transactions Float
  pay                Float
//   change             Float

  transaction_details TransactionDetails[]

  @@map("transaction")
}

model TransactionDetails {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId()
  product_id       String?     @db.ObjectId()
  product_info     Product?    @relation(fields: [product_id], references: [id])
  quantity         Float
  name             String
  price            Float
  image            String?
  category         String 

  transaction_id   String      @db.ObjectId()
  transaction_info Transaction @relation(fields: [transaction_id], references: [id])

  @@map("transaction_details")
}
